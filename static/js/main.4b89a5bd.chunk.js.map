{"version":3,"sources":["App.tsx","utils/hooks.ts","serviceWorker.ts","index.tsx"],"names":["App","fn","deps","mod","React","useState","wasm","setWasm","useEffect","a","useCrate","response","setResponse","resp","compile","console","log","some","d","destructor","className","value","language","placeholder","padding","style","margin","fontSize","width","height","backgroundColor","fontFamily","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAwDeA,EAlDO,WACpB,ICSAC,EACAC,EDVMC,ECLD,WACL,MAAwBC,IAAMC,WAA9B,mBAAOC,EAAP,KAAaC,EAAb,KASA,OAPAH,IAAMI,WAAU,WACd,sBAAC,4BAAAC,EAAA,sEACmB,8BADnB,OACON,EADP,OAECI,EAAQJ,GAFT,0CAAD,KAIC,IAEIG,EDLKI,GACZ,EAAgCN,IAAMC,WAAtC,mBAAOM,EAAP,KAAiBC,EAAjB,KAQA,OCAAX,EDNc,WACZ,IAAMY,EAAOV,EAAIW,QAAQ,iBACzBC,QAAQC,IAAIH,GACZD,EAAYC,ICIdX,EDHG,CAACC,GCKJC,IAAMI,WAAU,WACd,IAAIN,EAAKe,MAAK,SAACC,GAAD,OAAQA,KAAtB,CACA,IAAMC,EAAalB,IACnB,OAAO,WACLkB,GAAcA,QAGfjB,GDTD,yBAAKkB,UAAU,OACb,kBAAC,IAAD,CACEC,MAAO,gBACPC,SAAS,IACTC,YAAY,+BAEZC,QAAS,GACTC,MAAO,CACLC,OAAQ,GACRC,SAAU,GACVC,MAAO,IACPC,OAAQ,IACRC,gBAAiB,UACjBC,WAAY,kFAGhB,yBAAKN,MAAO,CACVC,OAAQ,KAER,4CAEF,kBAAC,IAAD,CACEL,MAAOV,EACPW,SAAS,MAETE,QAAS,GACTC,MAAO,CACLC,OAAQ,GACRC,SAAU,GACVC,MAAO,IACPC,OAAQ,IACRC,gBAAiB,UACjBC,WAAY,oFErCFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4b89a5bd.chunk.js","sourcesContent":["import React from 'react';\nimport {useCrate, useTakeEffect} from './utils/hooks';\nimport logo from './logo.svg';\nimport './App.css';\nimport CodeEditor from '@uiw/react-textarea-code-editor';\n\nconst App: React.FC = () => {\n  const mod = useCrate();\n  const [response, setResponse] = React.useState();\n\n  useTakeEffect(() => {\n    const resp = mod.compile(\"int main() {}\")\n    console.log(resp)\n    setResponse(resp);\n  }, [mod]);\n\n  return (\n    <div className=\"App\">\n      <CodeEditor\n        value={\"int main() {}\"}\n        language=\"c\"\n        placeholder=\"Please enter bugu lang code.\"\n        // onChange={(evn) => setCode(evn.target.value)}\n        padding={15}\n        style={{\n          margin: 12,\n          fontSize: 12,\n          width: 44 * 16,\n          height: 44 * 12,\n          backgroundColor: \"#f5f5f5\",\n          fontFamily: 'ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace',\n        }}\n      />\n      <div style={{\n        margin: 12,\n      }}>\n        <button>compile</button>\n      </div>\n      <CodeEditor\n        value={response}\n        language=\"asm\"\n        // placeholder=\"Please enter JS code.\"\n        padding={15}\n        style={{\n          margin: 12,\n          fontSize: 12,\n          width: 44 * 16,\n          height: 44 * 12,\n          backgroundColor: \"#f5f5ff\",\n          fontFamily: 'ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace',\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\n\nexport function useCrate() {\n  const [wasm, setWasm] = React.useState();\n\n  React.useEffect(() => {\n    (async () => {\n      const mod = await import('../crate');\n      setWasm(mod);\n    })();\n  }, []);\n\n  return wasm;\n}\n\nexport function useTakeEffect(\n  fn: () => void | (() => void),\n  deps: React.DependencyList,\n) {\n  React.useEffect(() => {\n    if (deps.some((d) => !d)) return;\n    const destructor = fn();\n    return () => {\n      destructor && destructor();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}